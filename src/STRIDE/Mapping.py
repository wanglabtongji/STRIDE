# -*- coding: utf-8 -*-
# @Author: Dongqing Sun
# @E-mail: Dongqingsun96@gmail.com
# @Date:   2021-08-31 18:53:18
# @Last Modified by:   Wenwen Shao
# @Last Modified time: 2023-12-13


import os
import pandas as pd
import numpy as np

from scipy.spatial import distance_matrix


def MappingParser(subparsers):
    workflow = subparsers.add_parser("map", 
        help = "Identify similarest cells for spatial spots. ")

    group_input = workflow.add_argument_group("Input arguments")
    group_input.add_argument("--topic-spot-mat", dest = "topic_st_file", required = True,
        help = "Location of the file which stores the topic distribution of spatial spots (i.e., outdir/outprefix_topic_spot_mat_ntopic.txt). ")
    group_input.add_argument("--sc-celltype", dest = "sc_anno_file", required = True,
        help = "Location of the single-cell celltype annotation file. "
        "The file should be a tab-separated plain-text file without header. "
        "The first column should be the cell name, and the second column should be the corresponding celltype labels. ")
    group_input.add_argument("--spot-celltype-frac", dest = "spot_deconv_file", required = True,
        help = "Location of the spot celltype fraction file (i.e., outdir/outprefix_spot_celltype_frac.txt). ")
    group_input.add_argument("--model-dir", dest = "model_dir", required = True,
        help = "The path of 'model' directory generated by 'deconvolve' (i.e., outdir/model). ")
    group_input.add_argument("--ntop", dest = "ntop", default = 10, type = int,
        help = "The number of top similar single cells expected to obtain. "
        "For recommendation, the size should be increased as the number of point decreases. ")    


    group_output = workflow.add_argument_group("Output arguments")
    group_output.add_argument("--outdir", dest = "out_dir", default = ".", 
        help = "Path to the directory where the result file shall be stored. DEFAULT: current directory. ")
    group_output.add_argument("--outprefix", dest = "out_prefix", default = "STRIDE", 
        help = "Prefix of output files. DEFAULT: STRIDE. ")


def Mapping(topic_st_file, sc_anno_file, spot_deconv_file, model_dir, ntop, out_dir, out_prefix):
    ntopic = topic_st_file.split("_topic_spot_mat_")[1].split(".")[0]
    topic_sc_file = os.path.join(model_dir, "topic_cell_mat_%s.txt" %ntopic)
    topic_sc_df = pd.read_csv(topic_sc_file, sep = "\t", index_col = 0)
    topic_st_df = pd.read_csv(topic_st_file, sep = "\t", index_col = 0)

    dist_mat = distance_matrix(topic_st_df.T, topic_sc_df.T)

    dist_mat_argsort = np.argsort(dist_mat, axis = 1)
    
    sc_anno_df = pd.read_csv(sc_anno_file, sep = "\t", index_col = 0, header = None)
    spot_deconv_frac = pd.read_csv(spot_deconv_file, sep = "\t", index_col = 0)
    spot_map_count = ntop * spot_deconv_frac 
    spot_map_count = spot_map_count.applymap(lambda x: 0 if x < 1 else round(x)) 
    
    
    celltypes = spot_deconv_frac.columns.to_numpy()
    dist_mat_argsort_top = [[] for _ in range(dist_mat_argsort.shape[0])]
    for row_idx in range(dist_mat_argsort.shape[0]):
        spot_cell_ct = sc_anno_df.iloc[dist_mat_argsort[row_idx]]
        for celltype in celltypes:
            celltype_idx = np.where(spot_map_count.columns == celltype)[0][0]
            n = spot_map_count.iloc[row_idx,celltype_idx]
            if n > 0:
                spot_cell_ct_index = dist_mat_argsort[row_idx][np.where(spot_cell_ct == celltype)[0]]
                dist_mat_argsort_celltype_top = spot_cell_ct_index[:n]
            else:
                dist_mat_argsort_celltype_top = []
            dist_mat_argsort_top[row_idx] = dist_mat_argsort_top[row_idx] + list(dist_mat_argsort_celltype_top)

    
    spot_names = topic_st_df.columns.to_numpy()
    dist_df_argsort_top = pd.DataFrame(columns=["Spots", "Singlecells"])
    for name, sublist in zip(spot_names, dist_mat_argsort_top):
        spots = [f"{name}_{i+1}" for i, item in enumerate(sublist)]
        dist_df_argsort_top = pd.concat([dist_df_argsort_top, pd.DataFrame({"Spots": spots, "Singlecells": sublist})], ignore_index=True)
    spot_cell_df = dist_df_argsort_top
    spot_cell_df["Celltypes"] = dist_df_argsort_top["Singlecells"].apply(lambda x: sc_anno_df.iloc[x])
    spot_cell_df["Singlecells"] = dist_df_argsort_top["Singlecells"].apply(lambda x: topic_sc_df.columns[x])
    
    spot_cell_file = os.path.join(out_dir, "%s_spot_mapping_similar_%s_cell.txt" %(out_prefix, ntop))
    spot_cell_df.to_csv(spot_cell_file, sep = "\t", index = False, header = True)
    spot_map_count_file = os.path.join(out_dir, "%s_spot_mapping_celltype_counts.txt" %(out_prefix))
    spot_map_count.to_csv(spot_map_count_file, sep = "\t", index = True, header = True)

